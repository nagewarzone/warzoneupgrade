const express = require('express');  
const cors = require('cors');
const admin = require('firebase-admin');
const path = require('path');
const fetch = require('node-fetch'); // ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Discord webhook


// ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Service Account ‡∏Ç‡∏≠‡∏á Firebase Admin SDK
const serviceAccount = require('./firebase-adminsdk.json');

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Firebase Admin
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});

const db = admin.firestore();
const app = express();
const port = 3000;

app.use(cors());
// ‡πÉ‡∏ä‡πâ express built-in json parser ‡πÅ‡∏ó‡∏ô body-parser
app.use(express.json());

// ‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ü static HTML, CSS, JS ‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå public
app.use(express.static(path.join(__dirname, 'public')));

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á Discord webhook
 * @param {string} message ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á
 * @param {object|null} embed (optional) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ embed object ‡∏à‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏ó‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
 */
async function sendDiscord(message, embed = null) {
  const webhookURL = 'https://discord.com/api/webhooks/1374624597881786439/1SmgQBuaM582kC3E6f0_dDmLKUu-nFxg0XLq2pjC4F7Dd6P3Q6Mj1qATz7jMhYWi-Drt';
  try {
    const body = embed ? { embeds: [embed] } : { content: message };
    await fetch(webhookURL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });
  } catch (error) {
    console.error('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Discord ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error);
  }
}

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô admin ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏à‡∏£‡∏¥‡∏á)
const ADMIN_PASSWORD = '7890';

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö admin ‡∏ú‡πà‡∏≤‡∏ô header 'x-admin-password'
function adminAuth(req, res, next) {
  const adminPass = req.headers['x-admin-password'];
  if (!adminPass || adminPass !== ADMIN_PASSWORD) {
    return res.status(403).json({ success: false, message: 'Forbidden: Admin access required' });
  }
  next();
}

// **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• username + password ‡∏Ç‡∏≠‡∏á admin ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö login ‡πÅ‡∏ö‡∏ö POST**
const ADMIN_CREDENTIALS = {
  username: 'admin', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ admin ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  password: ADMIN_PASSWORD // ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ADMIN_PASSWORD ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏° API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö login admin ‡πÇ‡∏î‡∏¢‡πÄ‡∏ä‡πá‡∏Ñ username + password ‡∏à‡∏≤‡∏Å body
app.post('/admin/login', (req, res) => {
  const { username, password } = req.body;

  if (!username || !password) {
    return res.status(400).json({ success: false, message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å username ‡πÅ‡∏•‡∏∞ password' });
  }

  if (
    username === ADMIN_CREDENTIALS.username &&
    password === ADMIN_CREDENTIALS.password
  ) {
    // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á token ‡∏´‡∏£‡∏∑‡∏≠ session ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
    return res.json({ success: true, message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', token: 'dummy-admin-token' });
  } else {
    return res.status(401).json({ success: false, message: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Admin' });
  }
});

// --- API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô / ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö / ‡πÉ‡∏ä‡πâ‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå / ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î ---
app.post('/proxy', async (req, res) => {
  const { action, username, password, name, pointChange, topgmChange } = req.body;

  if (!action) return res.json({ success: false, message: 'Missing action' });

  try {
    const userRef = db.collection('users').doc(username);
    const userDoc = await userRef.get();

    if (action === 'register') {
      if (!username || !password) return res.json({ success: false, message: 'Missing username or password' });

      if (userDoc.exists) return res.json({ success: false, message: 'Username ‡∏ã‡πâ‡∏≥' });

      await userRef.set({
        password,
        token: 0,
        topgm: 0,
        warzone: 0,
        point: 0
      });
      return res.json({ success: true });
    }

    if (!userDoc.exists) return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ' });
    const userData = userDoc.data();
    if (userData.password !== password) return res.json({ success: false, message: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

    if (action === 'login' || action === 'userinfo') {
      return res.json({ success: true, ...userData });
    }

    // ‡πÉ‡∏ä‡πâ‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå‡πÅ‡∏•‡∏Å topgm (‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord ‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô)
    if (action === 'usepoint') {
  if (typeof pointChange !== 'number' || typeof topgmChange !== 'number') {
    return res.json({ success: false, message: 'Invalid pointChange or topgmChange' });
  }

  const displayName = req.body.name || username; // fallback ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ name

  const currentPoint = userData.point || 0;
  const currentTopgm = userData.topgm || 0;

  const newPoint = currentPoint + pointChange;
  const newTopgm = currentTopgm + topgmChange;

  if (newPoint < 0) {
    return res.json({ success: false, message: 'POINT ‡πÑ‡∏°‡πà‡∏û‡∏≠' });
  }

  if (newTopgm < 0) {
    return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö topgm ‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ' });
  }

  await userRef.update({ point: newPoint, topgm: newTopgm });

  // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ó‡∏ô username
  await sendDiscord(`${displayName} ‡πÅ‡∏•‡∏Å ${Math.abs(pointChange)} ‡∏û‡πâ‡∏≠‡∏¢‡∏ó‡πå ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° TOPGM ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${Math.abs(topgmChange)} ‡∏ä‡∏¥‡πâ‡∏ô`);

  return res.json({ success: true });
}


    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° topgm ‡πÄ‡∏õ‡πá‡∏ô warzone ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Discord
    if (action === 'upgrade') {
  const itemName = 'topgm';
  const hasItem = userData[itemName] || 0;
  let currentToken = userData.token || 0;
  let warzone = userData.warzone || 0;
  let topgm = hasItem;

  if (currentToken <= 0) {
    return res.json({ success: false, message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ PEMTO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î' });
  }
  if (topgm <= 0) {
    return res.json({ success: false, message: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î' });
  }

  const rateDoc = await db.collection('upgraderates').doc(itemName).get();
  if (!rateDoc.exists) return res.json({ success: false, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î' });

  const { successRate, failRate, breakRate } = rateDoc.data();
  if (
    typeof successRate !== 'number' || typeof failRate !== 'number' || typeof breakRate !== 'number' ||
    successRate < 0 || failRate < 0 || breakRate < 0 ||
    successRate + failRate + breakRate > 1
  ) {
    return res.json({ success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
  }

  const roll = Math.random();
  let result = '';
  let logResult = '';
  let resultMessage = '';

  currentToken -= 1;

  if (roll < successRate) {
  result = 'success';
  topgm -= 1;
  logResult = `‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`;
  resultMessage = `‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: Warzone`;

  // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á embed ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡πÇ‡∏•‡πà
 const embed = { 
  title: `üéâ ${name || username} ‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à !`,
  description: `‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏°‡∏µ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô "   Warzone S.GOD+7  "\u00A0!!`,
  color: 0x00FF00, // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏î‡πÉ‡∏™
  image: {
    url: "https://img5.pic.in.th/file/secure-sv1/image_2025-05-21_025140493-removebg-preview.png"
  },
  footer: {
    text: "‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° Warzone S.GOD+7"
  },
  timestamp: new Date().toISOString()
};



  await sendDiscord(null, embed);


} else if (roll < successRate + failRate) {
  result = 'fail';
  logResult = `‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß`;
  resultMessage = `‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (TOPGM ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà)`;
  await sendDiscord(`\u00A0\u00A0\u00A0\u00A0${name || username}\u00A0\u00A0 ‚ö†Ô∏è\u00A0\u00A0 ‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î \u00A0\u00A0‡∏õ‡∏•‡∏≠‡∏ÅTOPGM ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß!\u00A0\ ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤`);
} else {
  result = 'broken';
  topgm -= 1;
  logResult = `‡πÅ‡∏ï‡∏Å`;
  resultMessage = `‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢ (TOPGM ‡∏´‡∏≤‡∏¢)`;
  await sendDiscord(`\u00A0\u00A0\u00A0\u00A0${name || username}\u00A0\u00A0 üí•\u00A0\u00A0 ‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏Å‡∏£‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß! \u00A0\u00A0‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏° \u00A0\u00A0‡∏õ‡∏•‡∏≠‡∏ÅTOPGM\u00A0\u00A0 ‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏•‡∏≤‡∏¢`);
}



  if (topgm < 0) topgm = 0;

  await userRef.update({
    token: currentToken,
    warzone: warzone,
    topgm: topgm
  });

  await db.collection('logs').add({
    Date: admin.firestore.FieldValue.serverTimestamp(),
    Username: username,
    Name: name || '',
    Item: itemName,
    Result: logResult
  });

  return res.json({ success: true, result: logResult, resultMessage });
}


    return res.json({ success: false, message: 'Unknown action' });
  } catch (err) {
    console.error(err);
    return res.json({ success: false, message: 'Server Error' });
  }
});

// API ‡∏î‡∏∂‡∏á‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (public)
app.get('/getUpgradeRates', async (req, res) => {
  try {
    const snapshot = await db.collection('upgraderates').get();
    const rates = {};
    snapshot.forEach(doc => {
      rates[doc.id] = doc.data();
    });
    res.json({ success: true, rates });
  } catch (err) {
    console.error(err);
    res.json({ success: false, message: 'Server Error' });
  }
});

// API ‡∏î‡∏∂‡∏á logs ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (public ‡∏´‡∏£‡∏∑‡∏≠ admin ‡∏Å‡πá‡πÑ‡∏î‡πâ)
// API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
app.get('/admin/getUsers', adminAuth, async (req, res) => {
  try {
    const usersSnapshot = await db.collection('users').get();
    const users = [];
    usersSnapshot.forEach(doc => {
      users.push({ username: doc.id, ...doc.data() });
    });
    res.json({ success: true, users });
  } catch (err) {
    console.error(err);
    res.json({ success: false, message: 'Server Error' });
  }
});

app.get('/getLogs', async (req, res) => {
  try {
    const snapshot = await db.collection('logs').orderBy('Date', 'desc').limit(100).get();
    const logs = [];
    snapshot.forEach(doc => {
      logs.push({ id: doc.id, ...doc.data() });
    });
    res.json({ success: true, logs });
  } catch (err) {
    console.error(err);
    res.json({ success: false, message: 'Server Error' });
  }
});

// --- API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin ---

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á header 'x-admin-password')
app.post('/admin/updateUpgradeRate', adminAuth, async (req, res) => {
  try {
    const { itemName, successRate, failRate, breakRate } = req.body;
    if (!itemName) return res.json({ success: false, message: 'Missing itemName' });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rate ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 1
    if (
      typeof successRate !== 'number' || typeof failRate !== 'number' || typeof breakRate !== 'number' ||
      successRate < 0 || failRate < 0 || breakRate < 0 ||
      successRate + failRate + breakRate > 1
    ) {
      return res.json({ success: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î
    const rateRef = db.collection('upgraderates').doc(itemName);
    await rateRef.set({
      successRate,
      failRate,
      breakRate,
      updatedAt: admin.firestore.FieldValue.serverTimestamp()
    });
    res.json({ success: true });
  } catch (err) {
    console.error(err);
    res.json({ success: false, message: 'Server Error' });
  }
});

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÄ‡∏ä‡πà‡∏ô token, point, topgm (‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á header 'x-admin-password')
app.post('/admin/updateUser', adminAuth, async (req, res) => {
  try {
    const { username, fields } = req.body;
    if (!username || typeof fields !== 'object') {
      return res.json({ success: false, message: 'Invalid request body' });
    }

    const userRef = db.collection('users').doc(username);
    const userDoc = await userRef.get();
    if (!userDoc.exists) return res.json({ success: false, message: 'User not found' });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏° fields ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    await userRef.update(fields);
    res.json({ success: true });
  } catch (err) {
    console.error(err);
    res.json({ success: false, message: 'Server Error' });
  }
});


app.listen(port, () => {
  console.log(`üî• Server is running at http://localhost:${port}`);
});
